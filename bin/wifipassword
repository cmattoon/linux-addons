#!/usr/bin/env python
"""
Returns a list of known access points and their passwords
"""
import os
from ConfigParser import SafeConfigParser, NoOptionError, NoSectionError

DATA_DIR = '/etc/NetworkManager/system-connections/'
KEY_WIRELESS = '802-11-wireless'
KEY_SECURITY = '802-11-wireless-security'
uuids = []
def get_data():
    data = {}
    parser = SafeConfigParser()

    for fname in os.listdir(DATA_DIR):
        user = key = mgmt =  None
        parser.read(os.path.join(DATA_DIR, fname))
        try:
            uuid = parser.get('connection', 'uuid')
            uuids.append(uuid)
        except NoSectionError:
            print "\033[91m%s\033[0m" % fname
            pass

        if KEY_WIRELESS in parser.sections():
            data[uuid] = {
                'ssid': parser.get(KEY_WIRELESS, 'ssid'),
                'mode': parser.get(KEY_WIRELESS, 'mode'),
                'mac': parser.get(KEY_WIRELESS, 'mac-address'),
                'enc': None,
                'user': None,
                'key': None
                }

            if KEY_SECURITY in parser.sections():
                mgmt = parser.get(KEY_SECURITY, 'key-mgmt')
                if mgmt == 'none':
                    """ Open or WEP """
                    if 'wep-key0' in parser.options(KEY_SECURITY):
                        data[uuid]['enc'] = 'WEP'
                        data[uuid]['key'] = parser.get(KEY_SECURITY, 'wep-key0')
                elif mgmt == 'wpa-psk':
                    """ WPA with preshared key """
                    if 'psk' in parser.options(KEY_SECURITY):
                        data[uuid]['enc'] = 'WPA-PSK'
                        data[uuid]['key'] = parser.get(KEY_SECURITY, 'psk')
                    pass
                elif mgmt == 'wpa-eap':
                    data[uuid]['enc'] = 'WPA-EAP'
                    """
                    See 'CCACwireless'
                    """
                    if '802-1x' in parser.sections():
                        # A list of keys that correspond to a password
                        pwdkeys = ['phase2-auth']
                        # A list of keys that correspond to a user/identity
                        usrkeys = ['identity']
                        opts = parser.options('802-1x')
                        user = None
                        key = None
                        for userkey in usrkeys:
                            try:
                                user = parser.get('802-1x', userkey)
                            except NoOptionError:
                                pass
                    
                        for pwdkey in pwdkeys:
                            try:
                                key = parser.get('802-1x', pwdkey)
                            except NoOptionError:
                                pass

                        if user is not None:
                            data[uuid]['user'] = user
                        if key is not None:
                            data[uuid]['key'] = key
                elif mgmt == 'foobar':
                    pass
            else:
                data[uuid]['enc'] = 'OPEN'
    return data

def _maxlen(data, key):
    return max([len(str(data[k][key])) for k in data])

def print_table(data):
    ssid = _maxlen(data, 'ssid')
    enc = _maxlen(data, 'enc') 
    user = _maxlen(data, 'user')
    key = _maxlen(data, 'key')

    for uuid in data:
        ap = {k:str(v) if v is not None else '--' for (k,v) in data[uuid].iteritems()}
        print(" %s\t%s\t%s\t%s" % (ap['ssid'].ljust(ssid), 
                                ap['enc'].ljust(enc), 
                                ap['user'].ljust(user), 
                                ap['key'].ljust(key)))

if __name__ == "__main__":
    print_table(get_data())
